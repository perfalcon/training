name: Validate Build Test Package

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  get_main_version:
    runs-on: ubuntu-latest
    outputs:
      ver: ${{steps.step1.outputs.info}}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
      - id: step1
        run: |
          echo "info="$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout)"" >> "$GITHUB_OUTPUT"

  validate_version:
    needs: get_main_version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - id: getCurrVersion
        run: |
          echo "currver="$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout)"" >> "$GITHUB_OUTPUT"
          echo working in ${{github.ref}}

      #- Design the logic and Develop the code - to discuss
      - id: validateVersion
        run: |
          chmod +x .github/scripts/validate_version.sh     
          echo "${{needs.get_main_version.outputs.ver}}  \n ${{steps.getCurrVersion.outputs.currver}}"
          echo "info="$(./.github/scripts/validate_version.sh  ${{needs.get_main_version.outputs.ver}} ${{steps.getCurrVersion.outputs.currver}})"" >> "$GITHUB_OUTPUT"
          #echo "info=true" >> "$GITHUB_OUTPUT"

      - name: StopOrContinue
        if: ${{steps.validateVersion.outputs.info == 'false' }}
        uses: actions/github-script@v7.0.1
        with:
          script: |
            core.setFailed('Please update the project version in pom as per the guidelines')
  
  

  build_withTestCases:
    needs: validate_version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Set up JDK 1.8
        uses: actions/setup-java@v4
        with:
          java-version: ' 8.0'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: |         
          cp .github/config/maven_settings.xml ~/.m2/settings.xml
          mvn -B clean test --file pom.xml -U   -Djfrog.username=${{secrets.MY_JFROG_USERNAME}} -Djfrog.password=${{secrets.MY_JFROG_PASSWORD}}     

  build:
    needs: build_withTestCases
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Set up JDK 1.8
        uses: actions/setup-java@v4
        with:
          java-version: ' 8.0'
          distribution: 'temurin'
          cache: maven
          
      - name: Build with Maven
        run: |
          cp .github/config/maven_settings.xml ~/.m2/settings.xml
          mvn -B clean package --file pom.xml  -DskipTests -U  -Djfrog.username=${{secrets.MY_JFROG_USERNAME}} -Djfrog.password=${{secrets.MY_JFROG_PASSWORD}}
          mkdir staging && cp target/*.war staging
          
      - uses: actions/upload-artifact@v4
        with:
          name: Package
          path: staging
          
      #- name: Deploy to Tomcat
        #run: |
         #pwd
         #ls -ltr
         #ls -ltr staging
         #curl -v -u  ${{ secrets.TOMCAT_USER }}:${{ secrets.TOMCAT_PASSWORD }} -T target/*.war "http://${{ secrets.TOMCAT_HOST }}/manager/text/deploy?path=/ROOT_12&update=true"
      
      - name: Deploy to Tomact with Maven
        run: |                      
           mvn  -Djfrog.username=${{secrets.MY_JFROG_USERNAME}} -Djfrog.password=${{secrets.MY_JFROG_PASSWORD}} -Dtomcat.username=${{secrets.TOMCAT_USER}}  -Dtomcat.password=${{secrets.TOMCAT_PASSWORD}} tomcat7:redeploy-only -f pom.xml
           #mvn tomcat7:undeploy -f pom.xml
