AEMaaCS utilizes a microservices architecture and key components like Dispatcher, Content Services, Query Service, and experience fragment service. 
Cloud Manager facilitates managing and deploying AEM instances with CI/CD, while the provided APIs enable seamless integration and customization capabilities. 

Scaling
AEMaaCS features a dynamic architecture that can adapt to changing demands, accommodating a flexible number of AEM images based on specific requirements. This dynamic architecture enables scalability and optimized resource allocation, providing an agile and efficient environment for AEM deployments in the cloud

Scalability based on Actual Traffic and Activity
On-Demand Instances for Efficiency
Agility with Modular Applications
Default Author Cluster for Continuous Availability

Horizontal:
The number of nodes for a given service is increased or decreased automatically, still allowing for individual default configurations.
Vertical: 
Allocated memory and CPU capacity can be scaled up or down via configuration for a fixed number of nodes to address individual requirements as needed.

Environments:
Prod: Hosts the applications for business practitioners.
Stage: Is always coupled to a single production environment in a 1:1 relationship. The stage environment is used for various performance and quality tests before changes to the application are pushed to the production environment
Dev: Allows developers to implement AEM applications under the same runtime conditions as the stage and production environments.
Rapid Dev: Allows for rapid development iterations for debugging new or existing code.

  TENANT:
        Positioned at the top of the hierarchy.
        Every customer is assigned a tenant, which serves as their dedicated space within Cloud Manager.
  PROGRAMS:
        Each tenant can have one or more programs.
        Programs typically correspond to the customer's licensed solutions or distinct projects.
  ENVIRONMENTS:
        Programs consist of multiple environments.
        Environments are designated for specific purposes, such as production (live content), staging (testing), and development.
        A program can have only one production environment, but it can have multiple non-production environments.
  REPOSITORY:
        Each program is associated with git repositories.
        Git repositories are used to maintain application and front-end code for the various environments within a program.
  TOOLS & WORKFLOWS:
        Pipelines are employed to manage the deployment of code from the repositories to the respective environments.
        Other tools and workflows are available for tasks like accessing logs, monitoring system performance, and managing the environments effectively.

Programs : Two Types:
    AEM Cloud Sites Service:
        Provides access to features and functionalities specifically designed for managing and delivering web content.
        The author tier includes all Sites functionality for all programs.
    AEM Cloud Assets Service:
        Offers features and capabilities tailored for managing digital assets and media content.
        The author tier encompasses all Assets functionality for all programs.
        By default, Assets programs do not have a publish tier or a preview tier, indicating that the publishing and   previewing of assets are not included out-of-the-box.

Runtime Architecture: 
The Runtime Architecture of AEMaaCS is dynamic and scalable, with a variable number of AEM images. 



AEM Components:
  OSGi manages services and components, 
  JCR stores all content, and 
  Sling provides a RESTful web framework.

Components : Small, resuable and collaborative components are used
Bundles : Components are composed in bundles
Application: Bundles are built into aan application

OSGI:
  
  A Modular Framework
  Allows dynamic loading and updating
  supports modularity and flexibility, allowing developers to create custom functionality and integrate it into the platform
  Bundles are managed by the OSGi framework in the deployment environment.
  Implemented by Felix

  Components:
    OSGi components are resuable units of code that provide specific functionality within the platform
    Built on top of OSGi bundles and are registered with OSGi framework
    managed by OSGi framework, handles lifecycle of components, including dynamic loading, uploading , and unloading them without affecting other components.
  
      Bundle --> Component 1
  
                 Component 2
  
  Services:
    facilitate communication between components in a modular application.
    defined by interfaces and implemented within osgi bundles.
    can be registered, managed and dynamically loaded by osgi framework.
  
  Budle A -------( Register) --->>Service ---> get ---> Bundle B
                                    |                    |
                                    |      listen        |
                                    |---------------------|
  Benefits of OSGi:
    Modular Architecture
    Dynamic loading and updating
    Version management
    Service Oriented architecure

JCR
  Implemented by Apache Jack Rabbit
  Used by AEM for Content Persistence, Storage, Search, access control and much more 
  is a db looks like a file system.
  unstructure and enables versioning and observation.
  provies full-text search, indexing, access control and event monitoring.

  Principles of JCR:
    Content Repository,
    Query Language : JCR-SQL2
    Access control
    Node types
 JCR operates on different abstraction , including MicroKernels like TarMK & MongoMK.
  TarMK stores data in TAR files, excelling in read performance.
  MongoMK leverage MongoDB for scalable and flexible storage, ideal for write-intensive workloads.

Sling:
  An open-source RESTful web framework.
  Built on top of OSGi framework and uses JCR as its data store.

  Features of Apache Sling:
    Resource-based URL mapping
    Scripting
    Templating
    Caching
    Authentication and authorization

  Sling content rendering
    render JCR content into HTML and other formats using templates.
    provides a separation between presentation & data.



AEM Deployment modes:
  AEMaaCS -->Content is automatically deployed to the cloud service without the need for separate publish or dispatch environments.
  No Author-pubish, single author & Clusters.
  
  Code development is similar in AEM On-premise & AEMaaCS

  For quick validation of the code, code can be synched from a local env to a Rapid Developmental Environment

Customer Releases

Deploying Content Packages via Cloud Manager and Package Manager
  Deployments via Cloud Manager
    Cloud Manager will only install the mutable content.
       Content Packages
       Generated content-package <PACKAGE_ID> located in file <PATH> is of MIXED type

 Immutable Content Packages:
   All content and code in the immutable repository must be checked into git and deployed through Cloud Manager, ensuring consistent code across environments.
   Application changes in the Blue-Green deployment pattern cannot rely on changes in the mutable repository except for specific cases
  
OSGI Configuration:
OSGI configuration should be committed to source control rather than through the web console.

Mutable Content:
  It might be useful to prepare content changes in source control so it can be deployed by Cloud Manager whenever an environment is updated
  

